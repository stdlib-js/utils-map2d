{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isArrayLikeObject from '@stdlib/assert-is-array-like-object';\nimport isFunction from '@stdlib/assert-is-function';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Applies a function to each nested element in an array of arrays and assigns the result to a nested element in a new array of arrays.\n*\n* ## Notes\n*\n* -   The applied function is provided the following arguments:\n*\n*     -   **value**: array element.\n*     -   **indices**: current array element indices.\n*     -   **arr**: input array.\n*\n* @param {ArrayLikeObject<ArrayLikeObject>} arr - array of arrays\n* @param {Function} fcn - function to apply\n* @param {*} [thisArg] - function execution context\n* @throws {TypeError} first argument must be an array of arrays\n* @throws {TypeError} second argument must be a function\n* @returns {ArrayArray} array of arrays\n*\n* @example\n* import naryFunction from '@stdlib/utils-nary-function';\n* import abs from '@stdlib/math-base-special-abs';\n*\n* var arr = [\n*     [ -1, -2, -3 ],\n*     [ -4, -5, -6 ]\n* ];\n*\n* var out = map2d( arr, naryFunction( abs, 1 ) );\n* // returns [ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n*/\nfunction map2d( arr, fcn, thisArg ) {\n\tvar out;\n\tvar tmp;\n\tvar M;\n\tvar N;\n\tvar a;\n\tvar i;\n\tvar j;\n\n\tif ( !isArrayLikeObject( arr ) ) {\n\t\tthrow new TypeError( format( '1VZ2O,GW', arr ) );\n\t}\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( '1VZ2H,G6', fcn ) );\n\t}\n\tM = arr.length;\n\tout = [];\n\tfor ( i = 0; i < M; i++ ) {\n\t\ta = arr[ i ];\n\t\tif ( !isArrayLikeObject( a ) ) { // note: cannot support the more general \"collections\" here (which includes typed arrays having more than 2^32-1 elements), as the output array is limited to 2^32-1 elements; thus, we opt for the lowest common denominator: generic arrays\n\t\t\tthrow new TypeError( format( '1VZBM,OD', i, a ) );\n\t\t}\n\t\tN = a.length;\n\t\ttmp = [];\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\ttmp.push( fcn.call( thisArg, a[ j ], [ i, j ], arr ) );\n\t\t}\n\t\tout.push( tmp );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default map2d;\n"],"names":["map2d","arr","fcn","thisArg","out","tmp","M","N","a","i","j","isArrayLikeObject","TypeError","format","isFunction","length","push","call"],"mappings":";;sRA2DA,SAASA,EAAOC,EAAKC,EAAKC,GACzB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,IAAMC,EAAmBV,GACxB,MAAM,IAAIW,UAAWC,EAAQ,WAAYZ,IAE1C,IAAMa,EAAYZ,GACjB,MAAM,IAAIU,UAAWC,EAAQ,WAAYX,IAI1C,IAFAI,EAAIL,EAAIc,OACRX,EAAM,GACAK,EAAI,EAAGA,EAAIH,EAAGG,IAAM,CAEzB,GADAD,EAAIP,EAAKQ,IACHE,EAAmBH,GACxB,MAAM,IAAII,UAAWC,EAAQ,WAAYJ,EAAGD,IAI7C,IAFAD,EAAIC,EAAEO,OACNV,EAAM,GACAK,EAAI,EAAGA,EAAIH,EAAGG,IACnBL,EAAIW,KAAMd,EAAIe,KAAMd,EAASK,EAAGE,GAAK,CAAED,EAAGC,GAAKT,IAEhDG,EAAIY,KAAMX,EACV,CACD,OAAOD,CACR"}